package main

import (
	"context"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func sample() {
	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()
	client, err := mongo.Connect(ctx, options.Client().ApplyURI("mongodb://foo:bar@localhost:27017"))
	if err != nil {
		log.Fatal(err)
	}

	collection := client.Database("baz").Collection("qux")
	res, err := collection.InsertOne(context.Background(), bson.M{"hello": "world"})
	if err != nil {
		log.Fatal(err)
	}
	id := res.InsertedID

	cur, err := collection.Find(context.Background(), bson.D{})
	if err != nil {
		log.Fatal(err)
	}

	defer cur.Close(context.Background())
	for cur.Next(context.Background()) {
		// To decode into a struct, use cursor.Decode()
		result := struct {
			Foo string
			Bar int32
		}{}
		err := cur.Decode(&result)
		if err != nil {
			log.Fatal(err)
		}
		// do something with result...

		// To get the raw bson bytes use cursor.Current
		raw := cur.Current
		// do something with raw...
	}

	if err := cur.Err(); err != nil {
		log.Fatal(err)
	}

	var results []struct {
		Foo string
		Bar int32
	}
	if err = cur.All(context.Background(), &results); err != nil {
		log.Fatal(err)
	}
	// do something with results...

	result := struct {
		Foo string
		Bar int32
	}{}
	filter := bson.D{{"hello", "world"}}
	err = collection.FindOne(context.Background(), filter).Decode(&result)
	if err != nil {
		log.Fatal(err)
	}
	// do something with result...

	IsDuplicateKeyError(error)
	IsNetworkError(error)
	IsTimeout(error)
}

func sample2() {
}
